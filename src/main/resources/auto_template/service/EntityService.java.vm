package ${parentPack}.service;

import java.util.List;
import java.util.Arrays;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import cn.hutool.core.util.StrUtil;
import ${parentPack}.utils.ConvertUtil;
import ${parentPack}.mapper.${tableInfo.javaTableName}Mapper;
import ${parentPack}.model.auto.${tableInfo.javaTableName};
import ${parentPack}.model.auto.${tableInfo.javaTableName}Criteria;
import ${parentPack}.model.request.TableParams;
import ${parentPack}.utils.SnowflakeIdWorker;
import ${parentPack}.utils.StringUtils;

/**
 * ${tableInfo.tableComment} ${tableInfo.javaTableName}Service
 * @Title: ${tableInfo.javaTableName}Service.java 
 * @Package ${parentPack}.service 
 * @author ${author}
 * @date ${datetime}  
 **/
@Service
public class ${tableInfo.javaTableName}Service implements BaseService<${tableInfo.javaTableName}, ${tableInfo.javaTableName}Criteria>{
	@Autowired
	private ${tableInfo.javaTableName}Mapper ${tableInfo.javaTableName_a}Mapper;
   #set( $pklag = false)
   #set( $pkfield = '' )
   #set( $pk_column_name = '' )
   #set( $pk_attrType = '')
   #foreach ($column in $beanColumns)
	   #if(${column.column_key} == 'PRI')
	   	#set( $pklag = true )
	   	#set( $pkfield = $column.javaName )
	   	#set( $pk_column_name=$column.column_name)
	   	#set( $pk_attrType=$column.javaType)
	   #end
   #end
	
	/**
	 * 分页查询
	 * @param pageNum
	 * @param pageSize
	 * @return
	 */
	 public PageInfo<${tableInfo.javaTableName}> list(TableParams tablepar,${tableInfo.javaTableName} ${tableInfo.javaTableName_a}){
		${tableInfo.javaTableName}Criteria testCriteria=new ${tableInfo.javaTableName}Criteria();
		//搜索
		if(StrUtil.isNotEmpty(tablepar.getSearchText())) {//小窗体
			testCriteria.createCriteria().andLikeQuery2(tablepar.getSearchText());
		}else {//大搜索
			testCriteria.createCriteria().andLikeQuery(${tableInfo.javaTableName_a});
		}
		PageHelper.startPage(tablepar.getPage(), tablepar.getLimit());
		List<${tableInfo.javaTableName}> list= ${tableInfo.javaTableName_a}Mapper.selectByCriteria(testCriteria);
		PageInfo<${tableInfo.javaTableName}> pageInfo = new PageInfo<${tableInfo.javaTableName}>(list);
		return  pageInfo;
	 }
#if(${pklag} == true)

	@Override
	public int deleteByPrimaryKey(String ids) {
		#if(${pk_attrType} == 'String')
		List<String> lista=ConvertUtil.toListStrArray(ids);
		${tableInfo.javaTableName}Criteria example=new ${tableInfo.javaTableName}Criteria();
		example.createCriteria().and${pkfield}In(lista);
		return ${tableInfo.javaTableName_a}Mapper.deleteByCriteria(example);
		#elseif(${pk_attrType} == 'Long')
		Long[] integers = ConvertUtil.toLongArray(",", ids);
		List<Long> stringB = Arrays.asList(integers);
		${tableInfo.javaTableName}Criteria example=new ${tableInfo.javaTableName}Criteria();
		example.createCriteria().and${pkfield}In(stringB);
		return ${tableInfo.javaTableName_a}Mapper.deleteByCriteria(example);
		#else
		Integer[] integers = ConvertUtil.toIntArray(",", ids);
		List<Integer> stringB = Arrays.asList(integers);
		${tableInfo.javaTableName}Criteria example=new ${tableInfo.javaTableName}Criteria();
		example.createCriteria().and${pkfield}In(stringB);
		return ${tableInfo.javaTableName_a}Mapper.deleteByCriteria(example);
		#end
	}
	
	
	@Override
	public ${tableInfo.javaTableName} selectByPrimaryKey(String id) {
		#if(${pk_attrType} == 'String')
		return ${tableInfo.javaTableName_a}Mapper.selectByPrimaryKey(id);
		#elseif(${pk_attrType} == 'Long')
		Long id1 = Long.valueOf(id);
		return ${tableInfo.javaTableName_a}Mapper.selectByPrimaryKey(id1);
		#else
		Integer id1 = Integer.valueOf(id);
		return ${tableInfo.javaTableName_a}Mapper.selectByPrimaryKey(id1);
		#end
	}

	@Override
	public int updateByPrimaryKeySelective(${tableInfo.javaTableName} record) {
		return ${tableInfo.javaTableName_a}Mapper.updateByPrimaryKeySelective(record);
	}
#end
	
	/**
	 * 添加
	 */
	@Override
	public int insertSelective(${tableInfo.javaTableName} record) {
		#if(${pk_attrType} == 'String')
		//添加雪花主键id
		record.set${pkfield}(SnowflakeIdWorker.getUUID());
		#else
		record.set${pkfield}(null);
		#end
		return ${tableInfo.javaTableName_a}Mapper.insertSelective(record);
	}

	@Override
	public int updateByCriteriaSelective(${tableInfo.javaTableName} record, ${tableInfo.javaTableName}Criteria example) {
		return ${tableInfo.javaTableName_a}Mapper.updateByCriteriaSelective(record, example);
	}

	@Override
	public int updateByCriteria(${tableInfo.javaTableName} record, ${tableInfo.javaTableName}Criteria example) {
		return ${tableInfo.javaTableName_a}Mapper.updateByCriteria(record, example);
	}

	@Override
	public List<${tableInfo.javaTableName}> selectByCriteria(${tableInfo.javaTableName}Criteria example) {
		return ${tableInfo.javaTableName_a}Mapper.selectByCriteria(example);
	}

	@Override
	public long countByCriteria(${tableInfo.javaTableName}Criteria example) {
		return ${tableInfo.javaTableName_a}Mapper.countByCriteria(example);
	}

	@Override
	public int deleteByCriteria(${tableInfo.javaTableName}Criteria example) {
		return ${tableInfo.javaTableName_a}Mapper.deleteByCriteria(example);
	}

}
